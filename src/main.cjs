const { app, BrowserWindow } = require('electron');
const path = require('path');
const fs = require('fs');

// Electron Ï∞Ω ÏÉùÏÑ± Ìï®Ïàò
function createWindow() {
	const win = new BrowserWindow({
		width: 1200,
		height: 800,
		webPreferences: {
			nodeIntegration: true,
			contextIsolation: false,
			devTools: true,
		},
	});

	// Í∞úÎ∞ú Î™®Îìú vs ÌîÑÎ°úÎçïÏÖò Î™®Îìú Î∂ÑÍ∏∞
	if (process.env.NODE_ENV === 'development') {
		console.log('üõ† Running in development mode');
		win.loadURL('http://localhost:5173');
	} else {
		console.log('üöÄ Running in production mode');
		console.log('üîç Current directory:', __dirname);

		// app.asar ÎÇ¥Î∂Ä Ïó¨Î∂Ä ÌôïÏù∏
		const isAsar = process.resourcesPath.includes('app.asar');
		// dist Ìè¥Îçî Í≤ΩÎ°ú Í≤∞Ï†ï
		const resourcePath = isAsar
			? path.join(process.resourcesPath, 'app.asar.unpacked', 'dist')
			: path.join(process.resourcesPath, 'dist');

		const indexPath = path.join(resourcePath, 'index.html');
		console.log('üìÇ Attempting to load file from:', indexPath);

		// ÌååÏùº Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ ÌõÑ Î°úÎìú
		if (fs.existsSync(indexPath)) {
			console.log('‚úÖ index.html file exists');
			// baseURLForDataURL: Íº≠ ÌïÑÏöîÌïú Í≤ΩÏö∞Îßå ÏÇ¨Ïö©
			win
				.loadFile(indexPath, {
					baseURLForDataURL: `file://${resourcePath}`,
				})
				.catch((err) => {
					console.error('‚ùå Failed to load file:', err);
				});
		} else {
			console.error('‚ùå index.html file not found at:', indexPath);
			// ÎîîÎ†âÌÜ†Î¶¨ Íµ¨Ï°∞ Ï∂úÎ†• (ÎîîÎ≤ÑÍπÖÏö©)
			const parentDir = process.resourcesPath;
			if (fs.existsSync(parentDir)) {
				console.log('üìÇ Parent directory contents:', fs.readdirSync(parentDir));
				const distDir = path.join(parentDir, 'dist');
				if (fs.existsSync(distDir)) {
					console.log('üìÇ Dist directory contents:', fs.readdirSync(distDir));
				}
			}
		}
	}

	// DevTools ÏûêÎèô Ïã§Ìñâ & Ïû¨Ïó∞Í≤∞
	win.webContents.openDevTools();
	win.webContents.on('devtools-disconnected', () => {
		console.warn('‚ö†Ô∏è DevTools disconnected. Reopening...');
		setTimeout(() => {
			if (!win.isDestroyed()) {
				win.webContents.openDevTools();
			}
		}, 1000);
	});

	// ÌéòÏù¥ÏßÄ Î°úÎìú ÏôÑÎ£å Ïù¥Î≤§Ìä∏
	win.webContents.on('did-finish-load', () => {
		console.log('‚úÖ Page loaded successfully');
	});

	// ÌéòÏù¥ÏßÄ Î°úÎìú Ïã§Ìå® Ïù¥Î≤§Ìä∏
	win.webContents.on('did-fail-load', (event, errorCode, errorDescription) => {
		console.error('‚ùå Page failed to load:', errorCode, errorDescription);
		win.webContents.openDevTools();
	});

	// Î†åÎçîÎü¨ ÌîÑÎ°úÏÑ∏Ïä§ Ï∂©Îèå Í∞êÏßÄ & ÏûêÎèô Ïû¨ÏãúÏûë
	win.webContents.on('crashed', () => {
		console.error('‚ùå Renderer process crashed! Reloading...');
		win.reload();
	});
}

// DevTools Í∞ïÏ†ú Ïó∞Í≤∞ Ïú†ÏßÄ (Chrome Inspect)
app.commandLine.appendSwitch('remote-debugging-port', '9222');

// Ï§ÄÎπÑ ÏôÑÎ£å Ïãú Ï∞Ω ÏÉùÏÑ±
app.whenReady().then(createWindow);

// Î™®Îì† Ï∞ΩÏù¥ Îã´ÌòîÏùÑ Îïå Ï¢ÖÎ£å
app.on('window-all-closed', () => {
	if (process.platform !== 'darwin') {
		app.quit();
	}
});

// Dock ÏïÑÏù¥ÏΩò ÌÅ¥Î¶≠ Ïãú (macOS)
app.on('activate', () => {
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

// Ï†ÑÏó≠ ÏóêÎü¨ Ìï∏Îì§ÎßÅ
process.on('uncaughtException', (error) => {
	console.error('‚ùå Uncaught Exception:', error);
});
